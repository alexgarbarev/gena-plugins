{% include 'header' %}

#import <Typhoon/Typhoon.h>
#import "CCAssemblyTests.h"

#import "{{ prefix }}{{ module_name }}Assembly.h"
#import "{{ prefix }}{{ module_name }}Assembly_Testable.h"

#import "{{ prefix }}{{ module_name }}ViewController.h"
#import "{{ prefix }}{{ module_name }}Presenter.h"
#import "{{ prefix }}{{ module_name }}Interactor.h"
#import "{{ prefix }}{{ module_name }}Router.h"

@interface {{ prefix }}{{ module_name }}AssemblyTests : CCAssemblyTests

@property (nonatomic, strong) {{ prefix }}{{ module_name }}Assembly *assembly;

@end

@implementation {{ prefix }}{{ module_name }}AssemblyTests

//-------------------------------------------------------------------------------------------
#pragma mark - Setup
//-------------------------------------------------------------------------------------------

- (void)setUp
{
    [super setUp];

    self.assembly = [self activatedAssemblyForClass:[{{ prefix }}{{ module_name }}Assembly class]];
}

- (void)tearDown
{
    self.assembly = nil;
    [super tearDown];
}

//-------------------------------------------------------------------------------------------
#pragma mark - Elements creation
//-------------------------------------------------------------------------------------------

- (void)test_that_assembly_creates_viewController 
{
    id instance = [self.assembly view{{ module_name }}Module];

    XCTAssertKindOfClass(instance, {{ prefix }}{{ module_name }}ViewController);
    XCTAssertConformsToProtocol(instance, @protocol({{ prefix }}{{ module_name }}ViewInput));

    XCTAssertDependencyWithType(instance, output, @protocol({{ prefix }}{{ module_name }}ViewOutput));
}

- (void)test_that_assembly_creates_presenter 
{
    id instance = [self.assembly presenter{{ module_name }}Module];

    XCTAssertKindOfClass(instance, {{ prefix }}{{ module_name }}Presenter);
    XCTAssertConformsToAllProtocols(instance,
            @protocol({{ prefix }}{{ module_name }}ModuleInput),
            @protocol({{ prefix }}{{ module_name }}ViewOutput),
            @protocol({{ prefix }}{{ module_name }}InteractorOutput), nil);

    XCTAssertDependencyWithType(instance, view, @protocol({{ prefix }}{{ module_name }}ViewInput));
    XCTAssertDependencyWithType(instance, interactor, @protocol({{ prefix }}{{ module_name }}InteractorInput));
    XCTAssertDependencyWithType(instance, router, @protocol({{ prefix }}{{ module_name }}RouterInput));
}

- (void)test_that_assembly_creates_interactor 
{
    id instance = [self.assembly interactor{{ module_name }}Module];

    XCTAssertKindOfClass(instance, {{ prefix }}{{ module_name }}Interactor);
    XCTAssertConformsToProtocol(instance, @protocol({{ prefix }}{{ module_name }}InteractorInput));

    XCTAssertDependencyWithType(instance, output, @protocol({{ prefix }}{{ module_name }}InteractorOutput));
}

- (void)test_that_assembly_creates_router 
{
    id instance = [self.assembly router{{ module_name }}Module];

    XCTAssertKindOfClass(instance, {{ prefix }}{{ module_name }}Router);
    XCTAssertConformsToProtocol(instance, @protocol({{ prefix }}{{ module_name }}RouterInput));

    XCTAssertDependencyWithType(instance, transitionHandler, @protocol(CCTransitionHandler));
    XCTAssertDependencyWithType(instance, moduleFactory, @protocol(CCModuleFactory));
}

- (void)test_module_shorthand
{
    id<CCModule> module = [self.assembly module{{ module_name }}];

    XCTAssertDependency(module, moduleInput);
    XCTAssertDependencyWithType(module, asViewController, [UIViewController class]);
    XCTAssertDependencyWithType(module, asView, [UIView class]);
}

@end
